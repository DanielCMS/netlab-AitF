<div class="jumbotron jumbotron-research-banner jumbotron-fluid">
  <div class="container">
    <div class="jumbotron-content text-light">
      <h1 class="display-3"></h1>
      <p class="lead"></p>
    </div>
  </div>
</div>

<div class="container">
  <div class="row">
    <div class="col-12">
      <h1 class="display-4 mt-3">Recent Results</h1>
        <h4 class="mt-3">Distributed and Real-time Solution to OPF</h4>
        <p>
        One way to deal with the nonconvexity of OPF is <em>convex relaxation</em>.  Semidefinite relaxation, though convex, is still computational intensive for large networks.  To scale the computation, we propose <strong>distributed algorithms</strong> to solve OPF for radial networks (networks that have a tree topology), both single and multiphase, using three simple ideas.  First we use branch flow models and solve semidefinite relaxation of OPF.  Branch flow models were developed in our earlier work and they have much better numerical stability than the standard model. Second we decompose the computation to each individual node by introducing decoupling variables and consensus constraints.  Third we apply ADMM (alternating direction method of multipliers) to obtain a distributed solution.  Each iteration of a standard ADMM algorithm requires solving optimization subproblems, typically iteratively.  For our problem, we have shown that every subproblem can be solved in closed form or reduced to a 6 × 6 eigenvalue problem regardless of the size of the network.  This greatly speeds up the ADMM computation. 
        </p>
        <p> 
        Almost all OPF algorithms are <em>offline</em> in the sense that they iterate on all variables in the cyberspace until they converge before their solutions are applied to the physical grid.  In particular, the intermediate iterates typically do not satisfy the power flow equations nor operational constraints.  While offline algorithms are suitable for traditional applications such as economic dispatch or state estimation, they may become inadequate for real-time optimization of distributed energy resources in the future, especially in the presence of fluctuating loads and volatile renewables.  We have developed <strong>real-time OPF algorithms</strong> that iterate only on variables corresponding to controllable devices (e.g., intelligent loads) in feedback interaction with the grid, modeled by power flow equations.  The control objective is specified by an optimization problem and our goal is to design a real-time feedback controller so that the closed-loop system converges to an equilibrium that solves the optimization problem.  The basic idea is to explicitly exploit power network as a power flow equation solver, update our control variables by taking a single first-order or second-order gradient direction and apply it to the network in each iteration, without waiting for the computation to converge.  The network will solve the power flow equations in response of the control input and produce a new network state, which is then used to compute the next gradient iteration for the control variables, and the cycle repeats.  An important advantage of this is that such algorithms naturally tracks the solution of time-varying OPF problems, when changes manifest themselves in the network state that is used to calculate the control. 
        </p>
        <h4 class="mt-3">Placement and Capacity of Storage</h4>
        <p> 
        We have studied the problem of <strong>optimal placement and capacity of energy storage devices</strong> in a distribution network to minimize total energy loss, focusing on the structural properties of optimal strategies.  A continuous tree with linearized DistFlow model is developed to model the distribution network.  When all loads have the same shape, we prove that it is optimal to place storage devices near the leaves of the network away from the substation, and that the scaled storage capacity monotonically increases towards the leaves.  Moreover, under optimal storage placement, the locational marginal value of storage is equalized wherever nonzero storage is deployed and increases from the substation towards any leaf node over places where there is zero storage deployment.  We illustrate through simulations that these structural properties are robust in that they hold approximately when some of our modeling assumptions are relaxed. 
        </p>
        <h4 class="mt-3">Load-side Participation of Frequency Control</h4>
        <p>
        Frequency control maintains the frequency of a power system tightly around its nominal value when demand or supply fluctuates.  It is traditionally implemented on the generation side and consists of three mechanisms that work at different timescales in concert.  Ubiquitous continuous fast-acting distributed <em>load-side participation</em> in frequency control can greatly improve the dynamic and steady-state behavior.  The idea of load-side participation dates back to Schweppe and his coworkers in the late 1970s, but the need and the enabling technologies started to emerge only now.  We develop a new approach to the design of <strong>load-side frequency control</strong>.  The key idea is to formalize control goals as a constrained optimization problem (called OLC, optimal load control) and design distributed controllers such that the dynamics of the closed-loop system consisting of the power grid and the load controllers carries out a primal-dual algorithm to solve OLC.  We prove that the set of equilibrium points of the closed-loop dynamics coincide with the optimal solutions of OLC.  Moreover, given any initial point, the system converges to an equilibrium point.  This equilibrium point achieves secondary frequency control functions such as restoring system frequency back to its nominal value, driving the inter-area power flows to their scheduled values, and maintaining line power flows to under their capacity limits.  Unlike the traditional AGC, our control is distributed, requiring only neighborhood communication, and manages line congestion at fast timescale.  This can be used to provide reactive security at the secondary control timescale to supplement the preventive approach of N − 1 security at the tertiary control timescale, yielding economic efficiency. 
        </p>
        <h4 class="mt-3">Learning-based Real-time Optimization</h4>
        <p>
        A second challenge we addressed was <strong>learning-based optimization</strong> to push towards real-time planning and control.  Due to the complexity of the underlying optimization problems, it is extremely difficult for existing approaches to scale to real-time performance.  In practice, one typically employs a range of hand-crafted heuristics through careful engineering and manual inspection of the specific optimization problem in the specific application. In contrast, we have taking a learning-based viewpoint of optimization.  Rather than relying on manually designed heuristics, our goal is to using machine learning to automatically discover what are the good heuristics for any problem domain.  Our initial research focused on learning-based optimization of mixed integer linear programs (MILPs).  Our approach decomposes into a training phase and a run-time phase.  During training, the system iteratively learns to solve a focused distribution of MILPs more effectively.  At run-time, the system can then be deployed to efficiently solve MILPs drawn from the same distribution. 
        </p>
        <p>
        The key insight we leverage is that, even for NP-complete optimization problems such as MILPs, there often exist solvers that can find good feasible solutions of practical instances of the optimization problems (albeit slowly).  Given an initial “demonstration” of a feasible solution, our learning-based approach then learns what are the statistically significant structural properties of this class of MILPs that can lead to more efficiently finding the feasible solution.  For instance, the common approach to solving MILPs is branch-and-bound, which is essentially a tree-search heuristic that explores the combinatorial solution space.  In this way, we are learning a more efficient branch-and-bound rule tailored to the specific class of MILPs. Our initial results have demonstrated <em>significant improvements</em> over commercial solvers such as Gurobi on non-standard MILPs that no engineer has spent significant time tuning the solvers to solve faster (our approach offers no significant improvement over Gurobi on “standard” MILP benchmarks, which suggests that existing solvers are potentially over-tuned to standard benchmarks).</p> 
    </div>
  </div>
</div>
